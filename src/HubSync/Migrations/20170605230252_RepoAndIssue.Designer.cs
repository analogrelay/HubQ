// <auto-generated />
using HubSync.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace HubSync.Migrations
{
    [DbContext(typeof(HubSyncContext))]
    [Migration("20170605230252_RepoAndIssue")]
    partial class RepoAndIssue
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-preview2-25446")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HubSync.Models.Issue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Number");

                    b.Property<int>("RepositoryId");

                    b.HasKey("Id");

                    b.HasAlternateKey("Number", "RepositoryId");

                    b.HasIndex("RepositoryId");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("HubSync.Models.Repository", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Owner")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Owner", "Name");

                    b.ToTable("Repositories");
                });

            modelBuilder.Entity("HubSync.Models.SyncHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Agent");

                    b.Property<DateTime?>("CompletedUtc");

                    b.Property<DateTime>("CreatedUtc");

                    b.Property<int>("RepositoryId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("RepositoryId");

                    b.ToTable("SyncHistory");
                });

            modelBuilder.Entity("HubSync.Models.Issue", b =>
                {
                    b.HasOne("HubSync.Models.Repository", "Repository")
                        .WithMany("Issues")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HubSync.Models.SyncHistory", b =>
                {
                    b.HasOne("HubSync.Models.Repository", "Repository")
                        .WithMany("HistoryEntries")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
        }
    }
}
